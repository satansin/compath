package com.satansin.android.compath.socket;

import java.util.HashMap;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import com.satansin.android.compath.logic.City;
import com.satansin.android.compath.logic.Group;
import com.satansin.android.compath.logic.Location;
import com.satansin.android.compath.logic.Message;

public class SocketAnalyzer {

	// operation codes
	/**
	 * {"opcode":"101",
	 *  "usrname":"MrJin",
	 *  "password":"iIDns9sHD8dhs",
	 *  "session":不用判断}
	 */
	public static final int ASK_FOR_SESSION = 101;
	/**
	 * {"opcode":"102",
	 *  "location_id":"5362",
	 *  "session":不用判断}
	 */
	public static final int ASK_FOR_FEED = 102;
	/**
	 * {"opcode":"103",
	 *  "latitude":"118273632",
	 *  "longitude":"33283733",
	 *  "session":不用判断}
	 */
	public static final int ASK_FOR_LOCATION = 103;
	/**
	 * {"opcode":"104",
	 *  "content":"hi",
	 *  "time":"6348264376285(in millisecond)",
	 *  "group_id":"36293",
	 *  "session":"dfsfdif"(根据session读出发送者id作为消息的from值)}
	 */
	public static final int ASK_FOR_MESSAGE_SENDING = 104;
	/**
	 * {"opcode":"105",
	 * 	"group_id":"6352",
	 * 	"session":"dfisojf88d"(根据session读出id，不接收from此id的消息)}
	 */
	public static final int ASK_FOR_MESSAGE_RECEIVING = 105;
	/**
	 * {"opcode":"106",
	 * 	"session":"dfisojf88d"}
	 */
	public static final int ASK_FOR_MYGROUPS = 106;
	/**
	 * {"opcode":"107",
	 * 	"group_id":"6352",
	 * 	"session":"dfisojf88d"}
	 */
	public static final int ASK_FOR_GROUP_FAVORING = 107;
	/**
	 * {"opcode":"108",
	 * 	"usrname":"doubi",
	 * 	"password":"jidjfHIHDSUIFS",
	 * 	"session":不用判断}
	 */
	public static final int ASK_FOR_REGISTER = 108;
	/**
	 * {"opcode":"109",
	 * 	"city_id":"1",
	 * 	"session":"djisfs"}
	 */
	public static final int ASK_FOR_CITY_SETTING = 109;
	/**
	 * {"opcode":"110",
	 * 	"group_title":"hey, look",
	 * 	"location_id":"36273",
	 * 	"session":"difhso"}
	 */
	public static final int ASK_FOR_GROUP_CREATING = 110;
	/**
	 * {"opcode":"111",
	 * 	"session":"dfisojf88d"}
	 */
	public static final int ASK_FOR_FAVORITE_GROUPS = 111;
	/**
	 * {"opcode":"112",
	 * 	"group_id":"6352",
	 * 	"session":"dfisojf88d"}
	 */
	public static final int ASK_FOR_GROUP_FAVOR_REMOVING = 112;
	/**
	 * {"opcode":"113",
	 * 	"group_id":"6352",
	 * 	"session":"dfisojf88d"}
	 */
	public static final int ASK_FOR_GROUP_ENTERING = 113;
	/**
	 * {"opcode":"114",
	 * 	"group_id":"6352",
	 * 	"session":"dfisojf88d"}
	 */
	public static final int ASK_FOR_GROUP_EXITING = 114;
	/**
	 * {"opcode":"115",
	 * 	"group_id":"6352",
	 * 	"session":"dfisojf88d"}
	 */
	public static final int ASK_FOR_GROUP_FAVOR_STATUS = 115;
	/**
	 * {"opcode":"116",
	 * 	"session":"djfiusfs"}
	 */
	public static final int ASK_FOR_CITY_FEED = 116;
	/**
	 * {"opcode":"117",
	 * 	"session":"dijfisf"}
	 */
	public static final int ASK_FOR_MYCITY = 117;
	/**
	 * {"opcode":"118",
	 * 	"session":"df8s9fhs"}
	 */
	public static final int ASK_FOR_LOGOUT = 118;
	
	// return type codes
	/**
	 * {"type":"201",
	 * 	"session":"iIDns9sHD8dhs"/"",
	 * 	"first_login":"true/false",
	 * 	"error":"300/301"}
	 */
	public static final int RE_SESSION = 201;
	/**
	 * {"type":"202",
	 * 	"feeds":[
	 * 		{"id":"53723",
	 * 		 "title":"How to get there",
	 * 		 "last_active_time":"3623627342734(in millisecond)",
	 * 		 "owner_name":"MrJie",
	 * 		 "number_of_members":"53",
	 * 		 "location_name":"Street No 5"},
	 * 		...(没有feed数组长度0)],
	 * 	"error":"300"}
	 */
	public static final int RE_FEED = 202;
	/**
	 * {"type":"203",
	 * 	"location":
	 * 		{"id":"3523",
	 * 		 "name":"Street No 8",
	 * 		 "latitude(纬度)":"38273823",
	 * 		 "longitude(经度)":"116838200"},
	 * 	"error":"300/302"}
	 */
	public static final int RE_LOCATION = 203;
	/**
	 * {"type":"204",
	 * 	"message_sent":"true/false"
	 * 	"error":"300/303"}
	 */
	public static final int RE_MESSAGE_SENT = 204;
	/**
	 * {"type":"205",
	 * 	"messages":[
	 * 		{"content":"hi",
	 * 		 "time":"37264736274",
	 * 		 "from":"MrJie"},
	 * 		...(没有message数组长度为0)],
	 * 	"error":"300/303"}
	 */
	public static final int RE_MESSAGE_RECEIVED = 205;
	/**
	 * {"type":"206",
	 * 	"mygroups":[
	 * 		{"id":"53723",
	 * 		 "title":"How to get there",
	 * 		 "last_active_time":"3623627342734(in millisecond)",
	 * 		 "owner_name":"MrJie",
	 * 		 "number_of_members":"53",
	 * 		 "location_name":"Street No 5"},
	 * 		...(没有的话数组长度0)],
	 * 	"error":"300/303"}
	 */
	public static final int RE_MYGROUPS = 206;
	/**
	 * {"type":"207",
	 * 	"favored":"true/false",
	 * 	"error":"300/303"}
	 */
	public static final int RE_GROUP_FAVORED = 207;
	/**
	 * {"type":"208",
	 * 	"registered":"true/false",
	 * 	"error":"300/304"}
	 */
	public static final int RE_REGISTERED = 208;
	/**
	 * {"type":"209",
	 * 	"city_set":"true/false",
	 * 	"error":"300/303"}
	 */
	public static final int RE_CITY_SET = 209;
	/**
	 * {"type":"210",
	 * 	"created":"true/false"
	 * 	"new_id":"36273",
	 * 	"error":"300/303"}
	 */
	public static final int RE_GROUP_CREATED = 210;
	/**
	 * {"type":"211",
	 * 	"favorite_groups":[
	 * 		{"id":"53723",
	 * 		 "title":"How to get there",
	 * 		 "last_active_time":"3623627342734(in millisecond)",
	 * 		 "owner_name":"MrJie",
	 * 		 "number_of_members":"53",
	 * 		 "location_name":"Street No 5"},
	 * 		...(没有的话数组长度0)],
	 * 	"error":"300/303"}
	 */
	public static final int RE_FAVORITE_GROUPS = 211;
	/**
	 * {"type":"212",
	 * 	"removed":"true/false",
	 * 	"error":"300/303"}
	 */
	public static final int RE_FAVOR_GROUP_REMOVED = 212;
	/**
	 * {"type":"213",
	 * 	"entered":"true/false",
	 * 	"error":"300/303"}
	 */
	public static final int RE_GROUP_ENTERED = 213;
	/**
	 * {"type":"214",
	 * 	"exited":"true/false",
	 * 	"error":"300/303"}
	 */
	public static final int RE_GROUP_EXITED = 214;
	/**
	 * {"type":"215",
	 * 	"has_favored":"true/false",
	 * 	"error":"300/303"}
	 */
	public static final int RE_GROUP_FAVOR_STATE = 215;
	/**
	 * {"type":"216",
	 * 	"feeds":[
	 * 		{"id":"53723",
	 * 		 "title":"How to get there",
	 * 		 "last_active_time":"3623627342734(in millisecond)",
	 * 		 "owner_name":"MrJie",
	 * 		 "number_of_members":"53",
	 * 		 "location_name":"Street No 5"},
	 * 		...(没有feed数组长度0)],
	 * 	"city":
	 * 		{"id":"33",
	 * 		 "name":"南京",
	 * 		 "latitude":"62637223",
	 * 		 "longitude":"3265312"},
	 * 	"error":"300/303"}
	 */
	public static final int RE_CITY_FEED = 216;
	/**
	 * {"type":"217",
	 * 	"city_id":"23",
	 * 	"error":"300/303"}
	 */
	public static final int RE_MYCITY = 217;
	/**
	 * {"type":"218",
	 * 	"logged_out":"true/false",
	 * 	"error":"300/303"}
	 */
	public static final int RE_LOGGED_OUT = 218;
	
	public static final int ERROR_UNKNOWN = 300;
	public static final int ERROR_USRNAME_PASSWD_NOT_MATCHED = 301;
	public static final int ERROR_NON_LOC = 302;
	public static final int ERROR_NOT_LOGIN = 303;
	public static final int ERROR_USRNAME_REPEATED = 304;
	
	public static final String PARAM_USRNAME = "u";
	public static final String PARAM_PASSWORD = "p";
	public static final String PARAM_SESSION = "s";
	public static final String PARAM_GROUPS = "g";
	public static final String PARAM_LOCATION = "l";
	public static final String PARAM_CITY = "c";
	
	public static final String PARAM_SENT = "sn";
	public static final String PARAM_FAVORED = "f";
	public static final String PARAM_REGISTERED = "r";
	public static final String PARAM_SET = "st";
	public static final String PARAM_CREATED = "cr";
	public static final String PARAM_REMOVED = "rm";
	public static final String PARAM_ENTERED = "n";
	public static final String PARAM_EXITED = "x";
	public static final String PARAM_FIRST_LOGIN = "fl";
	public static final String PARAM_HAS_FAVORED = "h";
	public static final String PARAM_LOGGED_OUT = "lg";
	
	public static final String PARAM_LOCATION_ID = "li";
	public static final String PARAM_LATITUDE = "la";
	public static final String PARAM_LONGITUDE = "lo";
	public static final String PARAM_LOCATION_NAME = "ln";
	
	public static final String PARAM_MSG_CONTENT = "mc";
	public static final String PARAM_MSG_TIME = "mt";
	public static final String PARAM_MSG_FROM = "mf";
	
	public static final String PARAM_CITY_ID = "ci";
	public static final String PARAM_CITY_NAME = "cn";
	
	public static final String PARAM_GROUP_ID = "gi";
	public static final String PARAM_GROUP_TITLE = "gt";
	public static final String PARAN_GROUP_LAST_ACTIVE_TIME = "gl";
	public static final String PARAN_GROUP_OWNER_NAME = "go";
	public static final String PARAN_GROUP_NUNBER_MEMBERS = "gn";
	
	private static final String OPCODE_KEY = "o";
	private static final String RETURN_TYPE = "t";
	private static final String RETURN_ERROR = "e";
	
	private static final String BOOL_TRUE = "t";
	
	public static final int BEAN_GROUP = 0;
	public static final int BEAN_MESSAGE = 1;
	public static final int BEAN_LOCATION = 2;
	public static final int BEAN_CITY = 3;
	
	public static String getSendingMsg(int opCode) {
		HashMap<String, String> map = new HashMap<String, String>();
		map.put(OPCODE_KEY, String.valueOf(opCode));
		JSONObject json = new JSONObject(map);
		return json.toString();
	}

	public static String getSendingMsg(int opCode, String[] keys, String[] params) {
		HashMap<String, String> map = new HashMap<String, String>();
		map.put(OPCODE_KEY, String.valueOf(opCode));
		for (int i = 0; i < keys.length; i++) {
			map.put(keys[i], params[i]);
		}
		JSONObject json = new JSONObject(map);
		return json.toString();
	}

//	public static String getSendingMsg(int opCode, String beanKey, Object bean, int beanType) {
//		HashMap<String, String> map = new HashMap<String, String>();
//		map.put(OPCODE_KEY, String.valueOf(opCode));
//		map.put(beanKey, getSocketMessageFromBean(bean, beanType));
//		JSONObject json = new JSONObject(map);
//		return json.toString();
//	}
	
	public static String appendMsg(String message, String key, String param) {
		try {
			JSONObject json = new JSONObject(message);
			json.put(key, param);
			return json.toString();
		} catch (JSONException e) {
			return message;
		}
	}

	public static int getMsgType(String message) {
		int type = 0;
		try {
			JSONObject json = new JSONObject(message);
			type = Integer.parseInt(json.getString(RETURN_TYPE));
		} catch (Exception e) {
			e.printStackTrace();
		}
		return type;
	}
	
	public static int getMsgError(String message) {
		int error = 0;
		try {
			JSONObject json = new JSONObject(message);
			error = Integer.parseInt(json.getString(RETURN_ERROR));
		} catch (Exception e) {
			e.printStackTrace();
		}
		return error;
	}

	/**
	 * 
	 * @param message
	 * @param key
	 * @return the content of the key, if key is not existing, return an empty string
	 */
	public static String getStringMsgContent(String message, String key) {
		String content = "";
		try {
			JSONObject json = new JSONObject(message);
			content = json.getString(key);
		} catch (JSONException e) {
			e.printStackTrace();
		}
		return content;
	}
	
	public static int getIntMsgContent(String message, String key) {
		int content = 0;
		try {
			content = Integer.parseInt(getStringMsgContent(message, key));
		} catch (Exception e) {
			e.printStackTrace();
		}
		return content;
	}
	
	public static long getLongMsgContent(String message, String key) {
		long content = 0;
		try {
			content = Long.parseLong(getStringMsgContent(message, key));
		} catch (Exception e) {
			e.printStackTrace();
		}
		return content;
	}
	
	public static boolean getBoolMsgContent(String message, String key) {
		boolean content = false;
		String contentString = getStringMsgContent(message, key);
		if (contentString.equals(BOOL_TRUE)) {
			content = true;
		}
		return content;
	}

	public static String[] getArrayMsgContents(String message, String key) {
		String[] result = new String[]{};
		try {
			JSONObject json = new JSONObject(message);
			JSONArray jsonArray = json.getJSONArray(key);
			result = new String[jsonArray.length()];
			for (int i = 0; i < jsonArray.length(); i++) {
				result[i] = jsonArray.getString(i);
			}
		} catch (JSONException e) {
			e.printStackTrace();
		}
		return result;
	}

	public static Object getBeanFromSocketMessage(String content, int beanType) {
		switch (beanType) {
		case BEAN_GROUP:
			Group group = new Group();
			group.setId(getStringMsgContent(content, "id"));
			group.setLastActiveTime(getStringMsgContent(content, "last_active_time"));
			group.setLocation(getStringMsgContent(content, "location_name"));
			group.setNumberOfMembers(getStringMsgContent(content, "number_of_members"));
			group.setOwnerName(getStringMsgContent(content, "owner_name"));
			group.setTitle(getStringMsgContent(content, "title"));
			return group;
		case BEAN_LOCATION:
			Location location = new Location();
			location.setId(getStringMsgContent(content, "id"));
			location.setLatitude(getStringMsgContent(content, "latitude"));
			location.setLongitude(getStringMsgContent(content, "longitude"));
			location.setName(getStringMsgContent(content, "name"));
			return location;
		case BEAN_MESSAGE:
			Message message = new Message();
			message.setContent(getStringMsgContent(content, "content"));
			message.setFrom(getStringMsgContent(content, "from"));
			message.setTime(Long.parseLong(getStringMsgContent(content, "time")));
			return message;
		case BEAN_CITY:
			City city = new City();
			city.setId(getStringMsgContent(content, "id"));
			city.setName(getStringMsgContent(content, "name"));
			city.setLatitude(getStringMsgContent(content, "latitude"));
			city.setLongitude(getStringMsgContent(content, "longitude"));
			return city;
		default:
			return null;
		}
	}
	
//	private static String getSocketMessageFromBean(Object bean, int beanType) {
//		try {
//			JSONObject json = new JSONObject();
//			switch (beanType) {
//			case BEAN_GROUP:
//				break;
//			case BEAN_LOCATION:
//				break;
//			case BEAN_MESSAGE:
//				Message message = (Message) bean;
//				json.put("content", message.getContent());
//				json.put("group_id", String.valueOf(message.getGroupId()));
//				json.put("time", String.valueOf(message.getTime()));
//				return json.toString();
//			case BEAN_CITY:
//				break;
//			default:
//				return null;
//			}
//		} catch (JSONException e) {
//			return null;
//		}
//		return null;
//	}

}
